4*10
4*410
5
4*
3+5
4*410
add<-3+5
result=100
result=105
result=120
result+=80
result=result+80
myVar <- 100
cat("변수의 값은 :", myVar)
var1 = seq(1, 100, 3)
var
var1
var1 = 100
var2 = 3
result <- var1 / var2
result <- var1 / var2
var1 = 100 #numeric : 우리 눈에는 정수지만 프로그램은 실수로 간주. integer 되려면 100L
var2 = 3
result <- var1 / var2
result
options(digits = 5)
result
sprintf("%.7f")
result
sprintf("%.7f", var1/var2)
var1 %/% var2
var1 %% var2
#비교연산자
var1 == var2
var1 != var2
# data type
# data type 알아보는 함수: mode
var1 = "이것은 소리없는 아우성!"
mode(var1)
is.character(var1)
is.numeric(var1)
# type casting : 데이터 타입 바꾸는 것으로, as 계열의 함수 사용.
var1 = "3.141592"
as.double(var1)
var2 = FALSE
as.integer(var2)
as.numeric(var3)
var3 = TRUE
as.numeric(var3)
var4 = 100
var5 = 0
as.numeric(var4)
as.numeric(var5)
as.logical(var4)
as.logical(var5)
# package
# R은 처음 설치할 때 base package가 깔린다.
# 추가적인 기능을 이용하기 위해서 외부 package를 찾아서 설치해야 한다.
# 그래프를 그리기 위해서 많이 사용하는  package : ggplot2
# package 설치하기 위한 명령어: install.packages
install.packages("gglot2")
# package
# R은 처음 설치할 때 base package가 깔린다.
# 추가적인 기능을 이용하기 위해서 외부 package를 찾아서 설치해야 한다.
# 그래프를 그리기 위해서 많이 사용하는  package : ggplot2
# package 설치하기 위한 명령어: install.packages
install.packages("ggplot2")
# 설치된 package를 메모리에 load해야 사용할 수 있음.
library("ggplot2")
require(ggplot2)
#간단한 빈도를 나타내는 막대그래프를 그리기 위해 vector를 하나 만듦.
var1 = c("a", "b", "c", "a", "b", "a")
qplot(var1)
# 설치된 package를 삭제
remove.packages("ggplot2")
# package가 설치된 폴더 경로 알아보기
.libPaths()
install.packages("ggplot2")
# package 설치 경로를 변경하고 싶으면
.libPaths("c:/R-lecture/lib")
# package
# R은 처음 설치할 때 base package가 깔린다.
# 추가적인 기능을 이용하기 위해서 외부 package를 찾아서 설치해야 한다.
# 그래프를 그리기 위해서 많이 사용하는  package : ggplot2
# package 설치하기 위한 명령어: install.packages
install.packages("ggplot2")
install.packages("ggplot2")
# package 설치 후 제공하는 함수 이용.
# 도움말 볼 수 있음
help(qplot)
example(qplot)
# 설치된 package를 메모리에 load해야 사용할 수 있음.
library("ggplot2")
example(qplot)
example(qplot)
getwd()
setwd("c:/R-lecture")
getwd()
# 1. vector
# 스칼라의 확장, 1차원 선형구조, 같은 data type.
# 첨자 형태로 access(기호로 []사용). 다른 프로그래밍 언어와 달리, 1부터 index 시작.
# 벡터를 생성하는 방법: c, seq,
var1 = c(1, 2, 6, 7, 10)
# 1. vector
# 스칼라의 확장, 1차원 선형구조, 같은 data type.
# 첨자 형태로 access(기호로 []사용). 다른 프로그래밍 언어와 달리, 1부터 index 시작.
# 벡터를 생성하는 방법: c, seq,
var1 = c(1, 2, 6, 7, 10)
var1 = c(1, 2, 6, 7, 10)
var1 = c(1,2,6,9,10)
var1 = c(1,2,6,9,10)
var1 = c(1,2,6,9,10)
var1
var1 = c(1,2,6,9,10)
var1
mode(var1)
var2 = c(TRUE, FALSE, TRUE)
var2
var3 = c("홍길동", "김길동", "최길동")
var3
mode(var2)
car4 = (200, TRUE, "아우성!")
var4 = (200, TRUE, "아우성!")
var4 = (200, TRUE, "아우성!")
var4 = c(200, TRUE, "dkdntjd!")
var4
var5 =c(var1, var2)
var5 =c(var1, var2)
var5
# 2. colon(; 사용)
var1 = 1;5
var1
# 2. colon(: 사용)
var1 = 1:5
var1
var2 = 2:7 ; var2
var3 = 10:1 ; var3
var4 = 3.4:10 ; var4
# 3. seq(colon 일반형, 확장형) : colon의 일반형, 등차수열 형성해서 vector화 시킬 때 사용.
var1 = seq(1, 10, 3)
# 3. seq(colon 일반형, 확장형) : colon의 일반형, 등차수열 형성해서 vector화 시킬 때 사용.
var1 = seq(1, 10, 3); var1
var2 = seq(from=2, to=30, by=4); var2 #readability 좋음
# 4. rep(): 지정된 숫자만큼 반복해서 vector 생성.
var1 = rep(1:3, times=4)
# 4. rep(): 지정된 숫자만큼 반복해서 vector 생성.
var1 = rep(1:3, times=4); var1;
# 4. rep(): 지정된 숫자만큼 반복해서 vector 생성.
var1 = rep(1:3, times=4); var1
var2 = rep(1:3, 3)
var2
var3 = rep(1:4,each=2); var3
# vector의 데이터타입 확인
mode(var3)
# vector 안 데이터 개수 확인
var1 = c(1:10)
length(var1)
# cf) length 함수의 다른 의미 사용?
var1 = seq(1, 100, by= 3); var1
# by 대신 lenghth 넣을 수 있음
var1 = seq(1, 100, length = 3); var2
# by 대신 lenghth 넣을 수 있음
var1 = seq(1, 100, length = 3); var1
# 1부터 100까지 벡터를 형성할 것인데, 그 길이가 3이다. 즉, 1부터 100까지 값이 3개가 있어야 길이가 3이 될 수 있음. 그러면 당연히 가운데 값은 중간값이 잡힌다.
var2 = seq(1, 100, length = 7); var2
# vector에서 데이터 추출
# vector의 사용은 []를 이용해서 데이터 추출하면 되고, index가 0이 아니라 1부터 시작한다는 것만 기억하면 됨.
var1 = c(7, 90,80,60, 200)
var1
# 7 추출하고 싶다면?
var1[1]
# 마지막 원소 추출하고 싶다면?
var1[5]
# 그러면, 벡터 안에 원소가 무지막지하게 많을 때 마지막 원소를 추출하고 싶다면?
var1[length(var1)]
var1[length(var1)-2]
# 2번째, 3번째, 4번째 원소 추출하고 싶다면?
var1[2:4]
var1[c(1,5)]
var1[seq(1,4)] # 1, 2,3, 4번째 요소 나옴
# 칸이 없는데?
var1[6]
var1[-1]
var1[-1] # -가 들어가면, -1번째 항이 아니라 1번째 항을 제외한 나머지를 추출함.
var1[-c(1:3)]
# vector 데이터에 이름 붙이기
var1 = c(67, 90, 50)
# vector 데이터에 이름 붙이기
var1 = c(67, 90, 50) # numeric, combine 이용
# 의미 상 국어점수 67점, 수학점수 90점, 영어점수 50점이라고 하고 싶다면?
# 이름 붙어 있는지 확인하는 방법?
names(var1)
# 이제 var1이라는 벡터의 데이터에 이름을 부여.
name(var1) = c("국어", "영어", "수학")
# 이제 var1이라는 벡터의 데이터에 이름을 부여.
name(var1) = c("국어", "영어", "수학")
# 이제 var1이라는 벡터의 데이터에 이름을 부여.
name(var1) = c("국어", "수학", "영어")
# 이제 var1이라는 벡터의 데이터에 이름을 부여.
names(var1) = c("국어", "수학", "영어")
var1
# name 설정된 상태에서 데이터 추출?
var1["영어"]
# vector의 연산
# 수치형 vector는 scalar를 이용해 사칙연산 수행 가능. 벡터와 벡터 간 연산도 가능.
var1 <- 1:3
var2 <- 4:6
var1; var2
# 벡터에 대한 스칼라 연산산
var1 * 2
# 벡터에 대한 스칼라 연산
var1 * 2 # 2 4 6 : 각각의 원소에 대해 곱셈 수행
var1 + 10
# 벡터 간 연산
var1 + var2 # 같은 위치에 있는 원소끼리 연산산
var1 * var2
# 길이가 다른 벡터와의 연산산
var3 <- 5:10 #5 6 7 8 9 10
var1 + var3
var1 + var3 # 1 2 3 (1 2 3) -> 벡터 반복하는 형식으로 빈 칸채움
# 5 6 7 8 9 10
var4 = 5:9
# 5 6 7 8 9 10
var4 = 5:9 # 5 6 7 8 9
var4
var1 + var4 # 1 2 3 # 5 6 7 8 9
var1 + var4 # 1 2 3 # 5 6 7 8 9 #warning message 떨어짐: 오류가 아니라 경고. 별로 좋은 방식이 아니야!
합 연산
# union(합집합)
# vector 간 집합 연산
# union(합집합)
# intersect(교집합)
# setdiff(차집합)
var1 = c(1:5)
var2 = c(3:7)
union(var1, var2)
interset(var1, var2)
intersect(var1, var2)
setdiff(var1, var2)
# vector 간 비교: 두 벡터가 같은가 다른가 확인, 같으면 TRUE 아니면 FALSE
identical(var1, var2)
var3 = 1:3
var4 <- c(1, 2,3)
identical (var3, var4)
var3
var4identical (var3, var4)
var4
identical (var3, var4)
identical(var3, var4)
# vector 간 비교: 두 벡터가 같은가 다른가 확인, 같으면 TRUE 아니면 FALSE
var3 <- 1:3
var4 <- c(1,2,3)
var3, var4 ;
var3; var4
identical(var3, var4)
var5 <- 1:3
identical(var3, var5)
setequal(var3, var4)
setequal(var3, var4)
var1= 1:3
var2= c(3, 2, 1)
var1; var2;
setequal(var1, var2)
identical(var1, var2)
# 요소가 없는 vector
var1 = vector(mode="numeric", length=10) # 벡터 만들 건데 길이 10짜리, 숫자형으로, 초기값 0으로 설정한 벡터 만들어줘
var1
var2 = vector(mode="character", length=5)
var2
var1 = c(1:3)
var2 = 1:3
var1; var2
identical(var1, var2)
var3 = c(1,3,2,3,1,1,3,3)
setequal(var1, var3)
# matrix: 동일한 data type, 2차원 형태의 자료구조
# matrix의 생성
var1 = matrix(c(1:5)) # matrix의 생성 기준은 열. 열을 고정시키고 행을 늘린다. 1열 5행.
var1
var1 = matrix(c(1:10), nrow=2)
# 1부터 10까지 2행인 행렬. 2행 5열.
var1
var1 = matrix(c(1:10), nrow=3)
var1 = matrix(c(1:10), nrow=3)
# 열은 3개인데 자료 개수가 10개. 그러면 열이 4개여야 하는데, 어떻게? recycling!
var1
var1 = matrix(c(1:10), nrow=2, byrow = T)
var1
var2 = matrix(c(1:10), nrow=3, byrow = T)
var2
var1 = matrix(c(1:5))
var1
var2 = matrix(c(1:10), ncol=2)
var2
var2 = c(5,6,7,8)
# 벡터의 결합을 통한 매트릭스 생성.
# vector를 가로 방향, 세로 방햐으로 붙여서 2차원 형태로 matrix 생성 가능.
var1 = c(1,2,3,4)
# 벡터의 결합을 통한 매트릭스 생성.
# vector를 가로 방향, 세로 방햐으로 붙여서 2차원 형태로 matrix 생성 가능.
var1 = c(1,2,3,4)
var2 = c(5,6,7,8)
mat1 = rbind(var1, var2)
mat1
mat2 = cbind(var1, var2)
mat2
var1 = matrix(c(1:21), nrow=3, ncol=7)
var1
var1[1,4]
var1[2,]
var1[,3]
var1[c(2:3),c(4:5)]
var1[2:3,4:5]
length(var1)
nrow(var1); ncol(var2)
nrow(var1); ncol(var1)
apply(X=var1, MARGIN=1, MAX)
apply(X=var1, MARGIN=1, FUN=MAX)
apply(X=var1, MARGIN=1, FUN=max)
apply(X=var1, MARGIN=2, FUN=max)
apply(X=var1, MARGIN=1, FUN=mean)
mat4= matrix(1:10, 2:11)
mat4
apply(X=mat4, MARGIN=1, FUN=stdv)
apply(X=mat4, MARGIN=1, FUN=max)
apply(X=mat4, MARGIN=1, FUN=deviance)
var1 = matrix(c(1:6), ncol=3)
var1
var2 = matrix(c(1, -1, 2, -2, 1, -1), ncol=3)
var2
# 요소 단위의 곱연산(elemetwise product)
var1 * var2
var1 + var2
var1 %*% var2
var3 = matrix(c(1, -1, 2, -2, 1, -1), ncol = 2)
var3
var1 %*% var3
var1
var3
var1
var3 = matrix(c(1, -1, 2, -2, 1, -1), ncol = 2)
var3
var1 %*% var3
# 전치행렬
var1
var2 = t(var1)
var2
# 역행렬(matrix inversion)
solve(var1)
var1 = matrix(c(1:2), 3:4)
var1 = matrix(c(1, 2), c(3,4), ncol=2)
var1
var2 = matrix(c(1, 2, 3, 4), ncol=2)
var2
solve(var2)
# array: 3차원 이상, 같은 데이터 타입으로 구성
var1 = array(c(1:30), dim=c(3,2,5))
var1
var2 = array(c(1:24), dim=c(3,2,5))
var2
var1 = c("홍길동")
# 값이 하나짜리 벡터
# scalar : r의 가장 기본적인 자료구조
var2 = c(10,20,30)
rm(list=ls())
student_midterm
student_midterm=read.table("student_midterm.txt", sep=",", fileEncoding = "UTF-8", header=T)
# C:/R-lecture/data
setwd(str_c(getwd(),"/data)"))
setwd("C:/R-lecture/data")
student_midterm=read.table("student_midterm.txt", sep=",", fileEncoding = "UTF-8", header=T)
student_midterm
df = read.csv(file.choose())
df
df
df = read.csv(file.choose())
fileEncoding = "UTF-8)
df = read.csv(file.choose(),
fileEncoding = "UTF-8")
df = read.csv(file.choose(),
fileEncoding = "UTF-8")
df
df = read.csv(file.choose(),
fileEncoding = "UTF-8")
df
# xlsx package를 설치하고 로딩하자
install.packages("xlsx")
library(xlsx)
Sys.setenv(JAVA_HOME = "C:\\Program Files\\Java\\jre1.8.0_231")
student_midterm <- read.xlsx(file.choose(),
sheetIndex = 1
# 첫번째 시트에서
encoding = "UTF-8")
student_midterm <- read.xlsx(file.choose(),
sheetIndex = 1,
# 첫번째 시트에서
encoding = "UTF-8")
# JAVA_HOME 환경변수 설정
Sys.setenv(JAVA_HOME = "C:\\Program Files\\Java\\jre1.8.0_231")
student_midterm <- read.xlsx(file.choose(),
sheetIndex = 1,
# 첫번째 시트에서
encoding = "UTF-8")
student_midterm
summary(student_midterm)
# 결과형태를 class로
class(summary(student_midterm))
cat("처리된 결과는 :")
cat("처리된 결과는 :", "\n","\n")
cat("처리된 결과는 :", "\n","\n",
file = "C:/R-lecture/data/report.txt",
append = T)
write.table(student_midterm,
file = "C:/R-lecture/data/report.txt",
append = T)
capture.output(summary(student_midterm),
append = T)
cat("처리된 결과는 :", "\n","\n",
file = "C:/R-lecture/data/report.txt",
append = T)
write.table(student_midterm,
file = "C:/R-lecture/data/report.txt",
append = T)
capture.output(summary(student_midterm),
file = "C:/R-lecture/data/report.txt",
append = T)
cat("처리된 결과는 :", "\n","\n",
file = "C:/R-lecture/data/report.txt",
append = T)
write.table(student_midterm,
file = "C:/R-lecture/data/report.txt",
row.names = F, # 행번호 삭제
quote = F,    # ""삭제제
append = T)
capture.output(summary(student_midterm),
file = "C:/R-lecture/data/report.txt",
append = T)
cat("처리된 결과는 :", "\n","\n",
file = "C:/R-lecture/data/report.txt",
append = T)
write.table(student_midterm,
file = "C:/R-lecture/data/report.txt",
row.names = F, # 행번호 삭제
quote = F,    # ""삭제제
append = T)
capture.output(summary(student_midterm),
file = "C:/R-lecture/data/report.txt",
append = T)
df = data.frame(x=c(1:5),
y=seq(1,10,2),
z=c("a","b","c","d","e"),
stringsAsFactors = F
)
df
write.xlsx(df,"C:/R-lecture/data/report.xlsx")
# if구문
var1 = 100
var2 =20
# 조건에 따라서 실행되는 code block을 제어할 수 있다.
if(var1>var2){}
#조건무이참일 때 실행
cat("참이에요")
} else(
# 조건문이 거짓일 때 실핼ㅇ
cat("거짓이에요")
}
#flse  : 3항 연산자
var1 = 10
var2 = 10
ifelse(var1->var2, "참일경우 선택","F일 경우 ㅓㄴ택")
} else{
} else{
# 조건에 따라서 실행되는 code block을 제어할 수 있다.
if(var1>var2){}    #조건무이참일 때 실행
idx = 1
mtum = 0
while(idx<10){
mySum = mySum + idx
idx = idx + 1
}
mySum = 0
while(idx<10){
mySum = mySum + idx
idx = idx + 1
}
mySum
sum(c(1:9))
print(var1)
for(var1 in seq(1:100)){
if(var2 %% 3==0)
print(var1)
}
for(var1 in seq(1:100)){
if(var2 %% 3==0){
print(var1)
}
)
for(var1 in seq(1:100)){
if(var2 %% 3==0){
print(var1)
}
}
for(var1 in seq(1:100)){
if(var2 %% 3==0){
print(var1)
}
}
for(var1 in seq(1,100)){
if(var2 %% 3==0){
print(var1)
}
}
