geom_line() +
geom_abline(intercept = 12.1,
slope = -0.0003444)
aes(x=date,y=psavert)) +
geom_hline(yintercept = mean(economics$psavert)# 가로ㅣ 직선
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_hline(yintercept = mean(economics$psavert))# 가로ㅣ 직선
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_hline(yintercept = mean(economics$psavert))# 가로ㅣ 직선
# 수직선을 그릴 수 있어요!
# 가장 개인저축률이 낮은 날짜에 대한 수직선을 을을럴리겨 해요
ggplot(data= economics,
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = "날짜")
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = min(economics$psavert))
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = min(economics$psavert))
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = min(economics$date))
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = min(economics$psavert))
head(economics)
min(economics$psavert)
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_hline(yintercept = mean(economics$psavert))# 가로ㅣ 직선
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = min(economics$psavert))
min(economics$psavert)
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = max(economics$psavert))
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = min(economics$psavert))
# sol)
economics %>% filter(psavert == min(psavert)) %>%
select(date)
# sol)
economics %>% filter(psavert == min(psavert)) %>%
select(date)$date
# sol)
tmp <-
economics %>% filter(psavert == min(psavert)) %>%
select(date)
tmp <- as.data.frame(tmp)
result <- tmp$date    # 최종 날짜가 도출출
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = result))
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = result)
# 수직선을 그릴 수 있어요!
# 가장 개인저축률이 낮은 날짜에 대한 수직선을 그릴려겨 해요
economics
# 수직선을 그릴 수 있어요!
# 가장 개인저축률이 낮은 날짜에 대한 수직선을 그릴려겨 해요
economics1 <- as.data.frame(economics)
ggplot(data= economics1,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = min(economics1$psavert))
# 날짜가 아니라 날짜 표현형식으로된 문자열
# 문자열을 날짜로 바꾸려면 data type을 character에서 date type으로
as.Date("2005-05-01")
ggplot(data= economics,
aes(x=date,y=psavert)) +
geom_line() +
geom_vline(xintercept = as.Date("2005-05-01"))
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point()
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),    # ~부터
as.Date("1992-12-01")) +  # ~까지
ylim(7,10)
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),    # ~부터
as.Date("1992-12-01")) +  # ~까지
ylim(7,10) +
geom_text(aes(label=psavert,
vjust=0,
hjust=0))        # just : 조절, v : vertical 위로 조정
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),    # ~부터
as.Date("1992-12-01")) +  # ~까지
ylim(7,10) +
geom_text(aes(label=psavert,
vjust=0,
hjust=1))        # just : 조절, v : vertical 위로 조정
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),    # ~부터
as.Date("1992-12-01")) +  # ~까지
ylim(7,10) +
geom_text(aes(label=psavert,
vjust=-0.5,         # just : 조절, v : vertical 위로 조정
hjust=-0.5))
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
xlim(as.Date("1990-01-01"),    # ~부터
as.Date("1992-12-01")) +  # ~까지
ylim(7,10) +
geom_text(aes(label=psavert,
vjust=-0.5,         # just : 조절, v : vertical 위로 조정
hjust=-0.2))
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point()
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("1992-01-01"),
ymin=8,
ymax=9)
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("2005-01-01"),
ymin=5,
ymax=10)
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("2005-01-01"),
ymin=5,
ymax=10,
alpha=0.3)
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("2005-01-01"),
ymin=5,
ymax=10,
alpha=0.3,
fill="red")
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("2005-01-01"),
ymin=5,
ymax=10,
alpha=0.3,
fill="red") +
annotate("segment",
x=as.Date("1985-01-01"),
xend = as.Date("1995-01-01"),
y=7.5,
yend=8.5,
arrow=arrow(),    # 화살표
color="blue")
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("2005-01-01"),
ymin=5,
ymax=10,
alpha=0.3,
fill="red") +
annotate("segment",
x=as.Date("1985-01-01"),
xend = as.Date("1995-01-01"),
y=7.5,
yend=8.5,
arrow=arrow(),    # 화살표
color="blue") +
annotate("text",
x=as.Date("1985-01-01"),
y=15,
label="소리없는 아우성성")
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("2005-01-01"),
ymin=5,
ymax=10,
alpha=0.3,
fill="red") +
annotate("segment",
x=as.Date("1985-01-01"),
xend = as.Date("1995-01-01"),
y=7.5,
yend=8.5,
arrow=arrow(),    # 화살표
color="blue") +
annotate("text",
x=as.Date("1985-01-01"),
y=15,
label="소리없는 아우성") +  # 원하는 위치에 문자열
## 추가적인 기능은 요기까지
# 차트에 대한 title, x축 y축 title
labs(x="연도", y="개인별 저축률",
title="연도별 개인저축률 추이이")
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("2005-01-01"),
ymin=5,
ymax=10,
alpha=0.3,
fill="red") +
annotate("segment",
x=as.Date("1985-01-01"),
xend = as.Date("1995-01-01"),
y=7.5,
yend=8.5,
arrow=arrow(),    # 화살표
color="blue") +
annotate("text",
x=as.Date("1985-01-01"),
y=15,
label="소리없는 아우성") +  # 원하는 위치에 문자열
## 추가적인 기능은 요기까지
# 차트에 대한 title, x축 y축 title
labs(x="연도", y="개인별 저축률",
title="연도별 개인저축률 추이")
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("2005-01-01"),
ymin=5,
ymax=10,
alpha=0.3,
fill="red") +
annotate("segment",
x=as.Date("1985-01-01"),
xend = as.Date("1995-01-01"),
y=7.5,
yend=8.5,
arrow=arrow(),    # 화살표
color="blue") +
annotate("text",
x=as.Date("1985-01-01"),
y=15,
label="소리없는 아우성") +  # 원하는 위치에 문자열
labs(x="연도", y="개인별 저축률",
title="연도별 개인저축률 추이") +  # 차트, x축, y축 title
theme_dark()
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("2005-01-01"),
ymin=5,
ymax=10,
alpha=0.3,
fill="red") +
annotate("segment",
x=as.Date("1985-01-01"),
xend = as.Date("1995-01-01"),
y=7.5,
yend=8.5,
arrow=arrow(),    # 화살표
color="blue") +
annotate("text",
x=as.Date("1985-01-01"),
y=15,
label="소리없는 아우성") +  # 원하는 위치에 문자열
labs(x="연도", y="개인별 저축률",
title="연도별 개인저축률 추이") +  # 차트, x축, y축 title
theme_bw()
ggplot(data=economics,
aes(x=date, y=psavert)) +
geom_point() +
annotate("rect",     # annotate : 덧씌우다 "형식"
xmin=as.Date("1991-01-01"),
xmax=as.Date("2005-01-01"),
ymin=5,
ymax=10,
alpha=0.3,
fill="red") +
annotate("segment",
x=as.Date("1985-01-01"),
xend = as.Date("1995-01-01"),
y=7.5,
yend=8.5,
arrow=arrow(),    # 화살표
color="blue") +
annotate("text",
x=as.Date("1985-01-01"),
y=15,
label="소리없는 아우성") +  # 원하는 위치에 문자열
labs(x="연도", y="개인별 저축률",
title="연도별 개인저축률 추이") +  # 차트, x축, y축 title
theme_classic()
df <- as.data.frame(mpg)    # data frame으로 변환
library(ggplot2)     # package를 메모리에 로딩
df <- as.data.frame(mpg)    # data frame으로 변환
df
class(df)
write.table(df, "C:/python_DA/mpg.txt",
sep = ",",
row.names = T,
quote = FALSE,
append = TRUE,
na = "NA"
)
str(mpg)
## mpg data set에 대해서 다음의 내용을 수행하세요
df <- as.data.frame(mpg)
# 1. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.
str(df)
displ_4 = filter(df,
displ <= 4) %>%
summarise(displ_4이하 = mean(hwy))
library(dplyr)
# 1. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.
str(df)
displ_4 = filter(df,
displ <= 4) %>%
summarise(displ_4이하 = mean(hwy))
displ_5 = filter(df,
displ >= 5) %>%
summarise(displ_5이상 = mean(hwy))
cbind(displ_4,displ_5)
# 문자열과 숫자는 더할 수 없어
cat("결과값은 : ",myResult)
myResult = 200; # assignment (값을 할당해준다)
myResult <- 300 # assignment
400 -> myResult # assignment 기존프로그래밍 언어는 불가능 but, R은 가능
myResult
print(myResult) # 변수 출력
# 여러개의 값을 출력하려면 cat()
print("결과같은 :" + myResult) # java에서는 가능 but, R은 불가능
# 문자열과 숫자는 더할 수 없어
cat("결과값은 : ",myResult)
#########################################################
# 출력되는 형식을 살펴보자
myResult
mySeq = seq(100) # seq : R이 우리에게 제공해주는  함수
# 1부터 100까지 1씩 증가하는 숫자의 집합
mySeq
# consle창에 [숫자] : 출력되는 index순서를 지칭
mySeq = seq(5,100) # 5부터 100가지 1씩 증가하는 숫자의 집합
mySeq = seq(1,100,by = 2) # by : 증감을 지칭
mySeq
myResult = 200; # assignment (값을 할당해준다)
myResult <- 300 # assignment
400 -> myResult # assignment 기존프로그래밍 언어는 불가능 but, R은 가능
myResult
var1 <- 100
var2 <- 3
var1 / var2 # java언어 => 33이 나오게 됨 (정수하고 정수를 나눴으니까)
# 비교연산자
var1 == var2 # FALSE (false X), F 논리값 false는 대문자 or F
var1 != var2 # TRUE
var1 > var2
TRUE & TRUE
TRUE & FALSE
TRUE && FALSE
# 단일변수는 1개짜리 공간
# R은 여러가지 자료구조가 있다
# 가장 대표적인 자료구조(데이터를 저장하는 구조)에는 vector가 있다.
# R에서 vector는 연속적인 저장공간
# 다른언어의 array와 같은 구조
# vector는 1차원 자료구조
# 저장공간안에 모두 같은 데이터 타입이 들어온다.
# 함수를 이용해서 vector를 생성
# c() => combine의 약자 결합하다
c(10,20,30) # 10 20 30
c(TRUE, 20, 3.14) # TRUE : 논리값, 나머지 : 숫자
# datatype이 다르면 정해져있는 우선순위에 따라서 데이터가 바뀌게 된다 (데이터를 일치시키기 위해서)
# 같은 데이터 타입으로 vector생성(오류가 아니다)
c(TRUE,FALSE) & c(TRUE,TRUE) # 두개의 논리값을 가진 벡터를 만든다
# 벡터중에 원소가 하나인 벡터 -> scalar
# 앞에거 따로(T,T) 뒤에거 따로(F,T)
# 결과를 다시 벡터 형태로
# vector 연산 결과값 vector
c(TRUE,FALSE) && c(TRUE,TRUE)
# datatype이 다르면 정해져있는 우선순위에 따라서 데이터가 바뀌게 된다 (데이터를 일치시키기 위해서)
# 같은 데이터 타입으로 vector생성(오류가 아니다)
c(TRUE,FALSE) & c(TRUE,TRUE) # 두개의 논리값을 가진 벡터를 만든다
# 벡터중에 원소가 하나인 벡터 -> scalar
# 앞에거 따로(T,T) 뒤에거 따로(F,T)
# 결과를 다시 벡터 형태로
# vector 연산 결과값 vector
c(TRUE,FALSE) && c(TRUE,TRUE)
c(TRUE,F,TRUE) & c(FALSE,T)
!c(T,F,T,F)
# 다른언어와 마찬가지로 다양한 수학함수를 내장하고 있다
# 필요할 때 찾아서 사용해 보자
abs(-3) # abs : 절댓값
round(3.1415) # round : 반올림
# 다는 외울 수 없어. 필요할 때 찾아서 쓰면 돼
sqrt(100)
myVector = c(TRUE,10,30)  # numeric
myVector
# T=1,F=0
myVector = c(TRUE,10,30,"Hello") # character
myVector
myVar = 100
myVar <- 100
100 -> myVar
myVar
print(myVar)
cat("변수의 값은 :",myVar)
var1 = seq(1,100,3)
var1
# 연산자에 대해서 알아보자
# operartor
var1 = 100
var2 = 3
result <- var1/var2
result
options(digits = 5)
result
sprintf("%.7f") # 소수점 7자리를 실수로 표현하겠다
sprintf("%.9f",var1/var2)
options(digits = 5)
result
sprintf("%.7f",result) # 소수점 7자리를 실수로 표현하겠다
sprintf("%.9f",var1/var2)
# 간단한 빈도를 나타내는 막대그래프를 그리기위해 vector하나 만들어 보자
var1 = c("a","b","c","a","b","a")
# package안의 함수를 이용해서 빈도그래프 그리기
# quick plot
qplot(var1)
# package를 설치하기 위해서
install.packages("ggplot2")
# 설치된 package를 메모리에 load해야 사용할 수 있다
# 둘 중 하나 이용해서 로드
library(ggplot2)
require(ggplot2)
# 간단한 빈도를 나타내는 막대그래프를 그리기위해 vector하나 만들어 보자
var1 = c("a","b","c","a","b","a")
# package안의 함수를 이용해서 빈도그래프 그리기
# quick plot
qplot(var1)
# packages가 설치된 폴더 경로 알아보자
.libPaths()    # library path
# packages가 설치된 폴더 경로 알아보자
.libPaths()    # library path
library(ggplot2)
args(qplot)
example(qplot)
var1=c(1,2,6,9,10)
var1
mode(var1)
var2 = c(TRUE,FALSE,TRUE)
var2
var3 = c("홍길동","김길동","최길동")
var3
var4= c(200,TRUE,"아우성")
var4
# combine 함수를 이용해서 vector로 다른 vector를 만들 수 있음
var5= c(var1,var2) # 1 2 6 9 10 1 0 1
# 2. : 을 이용해서 vector 생성할 수 있다
#      numeric에서만 사용가능하고 1씩 증가하거나 감소하는 숫자의 집합을 vector로 만들때 사용
#      start:end 형태로 사용되고 둘 다 inclusive
var1 = 1:5; var1
var2 = 5:1; var2
var3 = 3.4:10;var3
# 3. seq()를 이용해서 vector를 생성할 수 있다.
#    : 의 일반형으로 동자수열을 생성해서 ector롸 시킬때 사용
var1 = seq(from=1,to=10,byu=3)  # 속성은 생략이가능
# 3. seq()를 이용해서 vector를 생성할 수 있다.
#    : 의 일반형으로 동자수열을 생성해서 ector롸 시킬때 사용
var1 = seq(from=1,to=10,byu=3)  # 속성은 생략이가능
# 3. seq()를 이용해서 vector를 생성할 수 있다.
#    : 의 일반형으로 동자수열을 생성해서 ector롸 시킬때 사용
var1 = seq(from=1,to=10,by=3)  # 속성은 생략이가능
var1
